install.packages("devtools")
install.packages("roxygen2")
load_all()
library("devtools")
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
Ps
data(brca)
brac
brca
features.brca <- apply(X = brca[,-10], MARGIN = 2, FUN = as.numeric)
labels.brca <- sapply(X = brca$cla, FUN = function(x) {ifelse(x == "malignant", 1, 0)})
train.mat <- features.brca
train.mat
train.cls <- labels.brca
train.cls
rownames(train.mat) <- paste("p", 1:nrow(train.mat))
rownames(train.mat)
rownames(train.mat) <- paste("p", 1:nrow(train.mat), sep="_")
rownames(train.mat)
train.cls <- labels.brca
table(train.cls)
train.cls
set.seed(1)
pos <- which(train.cls == 1)
neg <- which(train.cls == 0)
train.cls.noisy <- train.cls
train.cls.noisy[sample(pos, floor(length(pos) * 0.4))] <- 0
train.cls.noisy[sample(neg, floor(length(neg) * 0.2))] <- 1
table(train.cls.noisy)
train.cls.noisy
Ps <- rownames(train.mat)[pos]
Ns <- rownames(train.mat)[neg]
brca.preds <- adaSample(Ps, Ns, train.mat=train.mat, test.mat=train.mat,
classifier = "knn", C= 1, sampleFactor = 1)
head(brca.preds)
brca.preds
features.brca <- apply(X = brca[,-10], MARGIN = 2, FUN = as.numeric)
labels.brca <- sapply(X = brca$cla, FUN = function(x) {ifelse(x == "malignant", 1, 0)})
rownames(features.brca) <- paste("p", 1:nrow(features.brca), sep="_")
brca.mat <- apply(X = brca[,-10], MARGIN = 2, FUN = as.numeric)
brca.cls <- sapply(X = brca$cla, FUN = function(x) {ifelse(x == "malignant", 1, 0)})
rownames(brca.mat) <- paste("p", 1:nrow(brca.mat), sep="_")
table(brca.cls)
brca.cls
set.seed(1)
pos <- which(brca.cls == 1)
neg <- which(brca.cls == 0)
set.seed(1)
pos <- which(brca.cls == 1)
neg <- which(brca.cls == 0)
Ps <- rownames(brca.mat)[pos]
Ns <- rownames(brca.mat)[neg]
Ps
Ns
set.seed(1)
pos <- which(brca.cls == 1)
neg <- which(brca.cls == 0)
brca.cls.noisy <- brca.cls
brca.cls.noisy[sample(pos, floor(length(pos) * 0.4))] <- 0
brca.cls.noisy[sample(neg, floor(length(neg) * 0.2))] <- 1
table(brca.cls.noisy)
brca.cls.noisy
Ps <- rownames(brca.mat)[which(brca.cls.noisy == 1)]
Ns <- rownames(brca.mat)[which(brca.cls.noisy == 0)]
brca.preds <- adaSample(Ps, Ns, train.mat=train.mat, test.mat=train.mat,
classifier = "knn", C= 1, sampleFactor = 1)
head(brca.preds)
ifelse(brca.preds[,"P"] > 0.5, 1, 0)
sum(ifelse(brca.preds[,"P"] > 0.5, 1, 0) == brca.cls)
accuracy <- sum(ifelse(brca.preds[,"P"] > 0.5, 1, 0) == brca.cls) / length(brca.cls)
accuracy
accuracy <- sum(brca.cls.noisy == brca.cls) / length(brca.cls)
accuracy
Ps <- rownames(brca.mat)[which(brca.cls.noisy == 1)]
Ns <- rownames(brca.mat)[which(brca.cls.noisy == 0)]
brca.preds <- adaSample(Ps, Ns, train.mat=brca.mat, test.mat=brca.mat,
classifier = "knn", C= 1, sampleFactor = 1)
head(brca.preds)
accuracy <- sum(brca.cls.noisy == brca.cls) / length(brca.cls)
accuracy
accuracyWithAdaSample <- sum(ifelse(brca.preds[,"P"] > 0.5, 1, 0) == brca.cls) / length(brca.cls)
accuracy
head(brca.preds)
accuracyWithAdaSample <- sum(ifelse(brca.preds[,"P"] > 0.5, 1, 0) == brca.cls) / length(brca.cls)
accuracyWithAdaSample
library(AdaSampling)
library(AdaSampling)
library(AdaSampling)
glm
library(AdaSampling)
glm
library(AdaSampling)
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
library(AdaSampling)
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
brca.cls.noisy
set.seed(1)
pos <- which(brca.cls == 1)
neg <- which(brca.cls == 0)
brca.cls.noisy <- brca.cls
brca.cls.noisy[sample(pos, floor(length(pos) * 0.1))] <- 0
brca.cls.noisy[sample(neg, floor(length(neg) * 0.1))] <- 1
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
brca.cls.noisy
brca.mat
data.mat = brca.mat
data.cls = brca.cls.noisy
data.cls.truth = brca.cls
cvSeed=1
### evaluation function
evaluate <- function(TN, FP, TP, FN, psd=TRUE, print=FALSE) {
mat <- rbind(TN, FP, TP, FN)
if (print == TRUE) {
cat(round(mean(Se(mat)), digits=3))
cat(" ")
if (psd==TRUE) {
cat(round(sd(Se(mat)), digits=3))
cat(" ")
}
cat(round(mean(Sp(mat)), digits=3))
cat(" ")
if (psd==TRUE) {
cat(round(sd(Sp(mat)), digits=3))
cat(" ")
}
cat(round(mean(F1(mat)), digits=3))
cat(" ")
if (psd==TRUE) {
cat(round(sd(F1(mat)), digits=3))
cat(" ")
}
}
return(c(round(mean(Se(mat)), digits=3),
round(mean(Sp(mat)), digits=3),
round(mean(F1(mat)), digits=3)))
}
### Evaluation matrices
# sensitivity
Se <- function(mat) {
apply(mat, 2, function(x) {
TN <- x[1]
FP <- x[2]
TP <- x[3]
FN <- x[4]
TP/(TP+FN)
})
}
# specificity
Sp <- function(mat) {
apply(mat, 2, function(x) {
TN <- x[1]
FP <- x[2]
TP <- x[3]
FN <- x[4]
TN/(FP+TN)
})
}
# F1 score
F1 <- function(mat) {
apply(mat, 2, function(x){
TN <- x[1]
FP <- x[2]
TP <- x[3]
FN <- x[4]
2*TP/(2*TP+FP+FN)
})
}
library(e1071)
eval <- matrix(NA, nrow=4, ncol=3)
colnames(eval) <- c("Se", "Sp", "F1")
rownames(eval) <- c("Original", "Baseline", "AdaSingle", "AdaEnsemble")
library(caret);
k <- 5
set.seed(cvSeed)
fold <- createFolds(data.cls.truth, k);
# gold standard (orignal data)
TP <- TN <- FP <- FN <- c()
i=1
model <- svm(data.mat[-fold[[i]],], data.cls.truth[-fold[[i]]])
preds <- predict(model, data.mat[fold[[i]],], decision.values=TRUE, probability=F)
TP <- c(TP, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "1"]))
TN <- c(TN, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "0"]))
FP <- c(FP, sum((data.cls.truth[fold[[i]]] != preds)[preds == "1"]))
FN <- c(FN, sum((data.cls.truth[fold[[i]]] != preds)[preds == "0"]))
TP
TN
model
data.mat[-fold[[i]],]
data.cls.truth[-fold[[i]]]
preds
predict(model, data.mat[fold[[i]],], decision.values=TRUE, probability=F)
predict(model, data.mat[fold[[i]],])
predict(model, data.mat[fold[[i]],], decision.values = TRUE)
predict(model, data.mat[fold[[i]],])
predict(model, data.mat[fold[[i]],])
hist(predict(model, data.mat[fold[[i]],]))
ifelse(predict(model, data.mat[fold[[i]],])> 0.5, 1, 0)
model <- svm(data.mat[-fold[[i]],], data.cls.truth[-fold[[i]]])
ifelse(predict(model, data.mat[fold[[i]],])> 0.5, 1, 0)
TP <- c(TP, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "1"]))
TN <- c(TN, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "0"]))
FP <- c(FP, sum((data.cls.truth[fold[[i]]] != preds)[preds == "1"]))
FN <- c(FN, sum((data.cls.truth[fold[[i]]] != preds)[preds == "0"]))
evaluate(TN, FP, TP, FN, psd=FALSE)
TP
model <- svm(data.mat[-fold[[i]],], data.cls.truth[-fold[[i]]])
preds <- ifelse(predict(model, data.mat[fold[[i]],])> 0.5, 1, 0)
TP <- c(TP, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "1"]))
TN <- c(TN, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "0"]))
FP <- c(FP, sum((data.cls.truth[fold[[i]]] != preds)[preds == "1"]))
FN <- c(FN, sum((data.cls.truth[fold[[i]]] != preds)[preds == "0"]))
evaluate(TN, FP, TP, FN, psd=FALSE)
TP
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
library(AdaSampling)
set.seed(1)
pos <- which(brca.cls == 1)
neg <- which(brca.cls == 0)
brca.cls.noisy <- brca.cls
brca.cls.noisy[sample(pos, floor(length(pos) * 0.2))] <- 0
brca.cls.noisy[sample(neg, floor(length(neg) * 0.4))] <- 1
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
Ps <- rownames(brca.mat)[which(brca.cls.noisy == 1)]
Ns <- rownames(brca.mat)[which(brca.cls.noisy == 0)]
brca.preds <- adaSample(Ps, Ns, train.mat=brca.mat, test.mat=brca.mat,
classifier = "knn", C= 1, sampleFactor = 1)
head(brca.preds)
accuracy <- sum(brca.cls.noisy == brca.cls) / length(brca.cls)
accuracy
accuracyWithAdaSample <- sum(ifelse(brca.preds[,"P"] > 0.5, 1, 0) == brca.cls) / length(brca.cls)
accuracyWithAdaSample
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
library(AdaSampling)
?lda
?lad
lda
?lda
devtools::install_github("PengyiYang/AdaSampling", build_vignettes = TRUE)
library(AdaSampling)
library(AdaSampling)
?lda
library(MASS)
?lda
browseVignettes("AdaSampling")
devtools::check()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_rhub()
check_rhub()
library(devtools)
devtools::check_rhub()
check_rhub()
devtools::install_github("hadley/devtools")
devtools::check_rhub()
devtools::check_win_devel()
check_rhub()
check_rhub()
library(AdaSampling)
