brca.cls.noisy[sample(pos, floor(length(pos) * 0.1))] <- 0
brca.cls.noisy[sample(neg, floor(length(neg) * 0.1))] <- 1
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
brca.cls.noisy
brca.mat
data.mat = brca.mat
data.cls = brca.cls.noisy
data.cls.truth = brca.cls
cvSeed=1
### evaluation function
evaluate <- function(TN, FP, TP, FN, psd=TRUE, print=FALSE) {
mat <- rbind(TN, FP, TP, FN)
if (print == TRUE) {
cat(round(mean(Se(mat)), digits=3))
cat(" ")
if (psd==TRUE) {
cat(round(sd(Se(mat)), digits=3))
cat(" ")
}
cat(round(mean(Sp(mat)), digits=3))
cat(" ")
if (psd==TRUE) {
cat(round(sd(Sp(mat)), digits=3))
cat(" ")
}
cat(round(mean(F1(mat)), digits=3))
cat(" ")
if (psd==TRUE) {
cat(round(sd(F1(mat)), digits=3))
cat(" ")
}
}
return(c(round(mean(Se(mat)), digits=3),
round(mean(Sp(mat)), digits=3),
round(mean(F1(mat)), digits=3)))
}
### Evaluation matrices
# sensitivity
Se <- function(mat) {
apply(mat, 2, function(x) {
TN <- x[1]
FP <- x[2]
TP <- x[3]
FN <- x[4]
TP/(TP+FN)
})
}
# specificity
Sp <- function(mat) {
apply(mat, 2, function(x) {
TN <- x[1]
FP <- x[2]
TP <- x[3]
FN <- x[4]
TN/(FP+TN)
})
}
# F1 score
F1 <- function(mat) {
apply(mat, 2, function(x){
TN <- x[1]
FP <- x[2]
TP <- x[3]
FN <- x[4]
2*TP/(2*TP+FP+FN)
})
}
library(e1071)
eval <- matrix(NA, nrow=4, ncol=3)
colnames(eval) <- c("Se", "Sp", "F1")
rownames(eval) <- c("Original", "Baseline", "AdaSingle", "AdaEnsemble")
library(caret);
k <- 5
set.seed(cvSeed)
fold <- createFolds(data.cls.truth, k);
# gold standard (orignal data)
TP <- TN <- FP <- FN <- c()
i=1
model <- svm(data.mat[-fold[[i]],], data.cls.truth[-fold[[i]]])
preds <- predict(model, data.mat[fold[[i]],], decision.values=TRUE, probability=F)
TP <- c(TP, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "1"]))
TN <- c(TN, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "0"]))
FP <- c(FP, sum((data.cls.truth[fold[[i]]] != preds)[preds == "1"]))
FN <- c(FN, sum((data.cls.truth[fold[[i]]] != preds)[preds == "0"]))
TP
TN
model
data.mat[-fold[[i]],]
data.cls.truth[-fold[[i]]]
preds
predict(model, data.mat[fold[[i]],], decision.values=TRUE, probability=F)
predict(model, data.mat[fold[[i]],])
predict(model, data.mat[fold[[i]],], decision.values = TRUE)
predict(model, data.mat[fold[[i]],])
predict(model, data.mat[fold[[i]],])
hist(predict(model, data.mat[fold[[i]],]))
ifelse(predict(model, data.mat[fold[[i]],])> 0.5, 1, 0)
model <- svm(data.mat[-fold[[i]],], data.cls.truth[-fold[[i]]])
ifelse(predict(model, data.mat[fold[[i]],])> 0.5, 1, 0)
TP <- c(TP, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "1"]))
TN <- c(TN, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "0"]))
FP <- c(FP, sum((data.cls.truth[fold[[i]]] != preds)[preds == "1"]))
FN <- c(FN, sum((data.cls.truth[fold[[i]]] != preds)[preds == "0"]))
evaluate(TN, FP, TP, FN, psd=FALSE)
TP
model <- svm(data.mat[-fold[[i]],], data.cls.truth[-fold[[i]]])
preds <- ifelse(predict(model, data.mat[fold[[i]],])> 0.5, 1, 0)
TP <- c(TP, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "1"]))
TN <- c(TN, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "0"]))
FP <- c(FP, sum((data.cls.truth[fold[[i]]] != preds)[preds == "1"]))
FN <- c(FN, sum((data.cls.truth[fold[[i]]] != preds)[preds == "0"]))
evaluate(TN, FP, TP, FN, psd=FALSE)
TP
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
library(AdaSampling)
set.seed(1)
pos <- which(brca.cls == 1)
neg <- which(brca.cls == 0)
brca.cls.noisy <- brca.cls
brca.cls.noisy[sample(pos, floor(length(pos) * 0.2))] <- 0
brca.cls.noisy[sample(neg, floor(length(neg) * 0.4))] <- 1
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
Ps <- rownames(brca.mat)[which(brca.cls.noisy == 1)]
Ns <- rownames(brca.mat)[which(brca.cls.noisy == 0)]
brca.preds <- adaSample(Ps, Ns, train.mat=brca.mat, test.mat=brca.mat,
classifier = "knn", C= 1, sampleFactor = 1)
head(brca.preds)
accuracy <- sum(brca.cls.noisy == brca.cls) / length(brca.cls)
accuracy
accuracyWithAdaSample <- sum(ifelse(brca.preds[,"P"] > 0.5, 1, 0) == brca.cls) / length(brca.cls)
accuracyWithAdaSample
adaSvmBenchmark(data.mat = brca.mat, data.cls = brca.cls.noisy, data.cls.truth = brca.cls, cvSeed=1)
library(AdaSampling)
?lda
?lad
lda
?lda
devtools::install_github("PengyiYang/AdaSampling", build_vignettes = TRUE)
library(AdaSampling)
library(AdaSampling)
?lda
library(MASS)
?lda
browseVignettes("AdaSampling")
devtools::check()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_rhub()
check_rhub()
library(devtools)
devtools::check_rhub()
check_rhub()
devtools::install_github("hadley/devtools")
devtools::check_rhub()
devtools::check_win_devel()
check_rhub()
check_rhub()
library(AdaSampling)
library(AdaSampling)
data(brca)
head(brca)
# First, clean up the dataset to transform into the required format.
brca.mat <- apply(X = brca[,-10], MARGIN = 2, FUN = as.numeric)
brca.cls <- sapply(X = brca$cla, FUN = function(x) {ifelse(x == "malignant", 1, 0)})
rownames(brca.mat) <- paste("p", 1:nrow(brca.mat), sep="_")
# Introduce 40% noise to positive class and 30% noise to the negative class
set.seed(1)
pos <- which(brca.cls == 1)
neg <- which(brca.cls == 0)
brca.cls.noisy <- brca.cls
brca.cls.noisy[sample(pos, floor(length(pos) * 0.4))] <- 0
brca.cls.noisy[sample(neg, floor(length(neg) * 0.3))] <- 1
# Identify positive and negative examples from the noisy dataset
Ps <- rownames(brca.mat)[which(brca.cls.noisy == 1)]
Ns <- rownames(brca.mat)[which(brca.cls.noisy == 0)]
# Apply AdaSampling method on the noisy data
brca.preds <- adaSample(Ps, Ns, train.mat=brca.mat, test.mat=brca.mat, classifier = "knn")
head(brca.preds)
# Orignal accuracy from the labels
accuracy <- sum(brca.cls.noisy == brca.cls) / length(brca.cls)
accuracy
accuracyWithAdaSample <- sum(ifelse(brca.preds[,"P"] > 0.5, 1, 0) == brca.cls) / length(brca.cls)
accuracyWithAdaSample
setwd("/Users/pengyiyang/Dropbox/SMoS/Teaching & Supervision/EMBL PHD")
phospho <- read.delim("InsulinPhospho.txt", header = TRUE)
akt.substrates <- read.delim("Akt_substrates.txt")
source("/Users/pengyiyang/Dropbox/research/Projects/David James/Analysis/Time course/functions/getMotifFreq.R")
phospho.site.seqs <- as.character(phospho[,2])
akt.substrates.seq <- as.character(phospho[phospho[,1] %in% unlist(akt.substrates),2])
akt.freq.mat <- createFrequencyMat(akt.substrates.seq)
akt.freq.mat[c("S", "T"),7] <- 0.5
akt.frequency.score <- frequencyScoring(phospho.site.seqs, akt.freq.mat);
names(akt.frequency.score) <- phospho[,1]
phospho.mat <- rbind(phospho[which(phospho[,1] %in% unlist(akt.substrates)), -c(1:2)],
phospho[-which(phospho[,1] %in% unlist(akt.substrates)), -c(1:2)])
Akt.Ps <- as.character(phospho[phospho[,1] %in% unlist(akt.substrates),1])
Akt.Ns <- as.character(phospho[!(phospho[,1] %in% unlist(akt.substrates)),1])
rownames(phospho.mat) <- c(Akt.Ps, Akt.Ns)
data.cls.truth <- rep(c(1,0), time=c(length(Akt.Ps), length(Akt.Ns)))
tmp <- adaSample(Akt.Ps, Akt.Ns, train.mat=phospho.mat, test.mat=phospho.mat, classifier = "knn", C= 10, sampleFactor = 1)
tmp[1;10,]
tmp[1:10,]
tmp[1:20,]
ls()
library(AdaSampling)
library(AdaSampling)
library(AdaSampling)
weightedKNN
library(AdaSampling)
library(AdaSampling)
library(AdaSampling)
# set working directory
setwd("/Users/pengyiyang/Dropbox/research/Projects/Project_TFTarget/source code/classification")
# source prediction functions and help functions
#source("AdaEnsemble.R")
###########################
# getting expression data #
# mRNA
load("/Users/pengyiyang/Dropbox/research/Collaborations/With Sean/Pengyi with Sean/mES to mEPi/Analysis/Transcriptome/mRNA.RData")
expression.genes.mean <- mRNA.ratio.mean[which(sapply(strsplit(rownames(mRNA.ratio.mean), "~"), function(x){x[2]}) != "NA"), ]
rownames(expression.genes.mean) <- sapply(strsplit(rownames(expression.genes.mean), "~"), function(x){x[2]})
mRNA.genes.mean <- expression.genes.mean
# protein
load("/Users/pengyiyang/Dropbox/research/Collaborations/With Sean/Pengyi with Sean/mES to mEPi/Analysis/Proteome/proteome.RData")
protGene <- sapply(strsplit(rownames(proteome.ratio.mean), "~"), function(x){x[2]})
tmp <- split(data.frame(proteome.ratio.mean), protGene)
protein.genes.mean <- t(sapply(tmp, colMeans))
# normalise and combine mRNA and protein data
mRNA.dat <- medianScaleNormalization(standardize(mRNA.genes.mean))
prot.dat <- medianScaleNormalization(standardize(protein.genes.mean))
o <- intersect(rownames(mRNA.dat), rownames(prot.dat))
exp.dat <- cbind(mRNA.dat[o,], prot.dat[o, ])
################################
### TF potential targets
# Nanog_, Sox2_, Esrrb_, cMyc_, Otx2_r1_, Nr5a2_, Klf4_r1_
P <- read.delim("proximal_distal/cMyc_proximal.txt", head=FALSE)
idx <- which(rownames(exp.dat) %in% as.character(P[,4]))
Pls <- exp.dat[idx,]
dim(Pls)
D <- read.delim("proximal_distal/cMyc_distal.txt")
idx <- which(rownames(exp.dat) %in% as.character(D[,1]))
D.tmp <- exp.dat[idx,]
Dls <- D.tmp[setdiff(rownames(D.tmp), rownames(Pls)),]
dim(Dls)
Pl <- rbind(Pls, Dls)
# creating true negatives
set.seed(123)
Dl <- exp.dat[sample(setdiff(rownames(exp.dat), union(rownames(Pls), rownames(Dls))), 1*(nrow(Pls)+nrow(Dls))),]
dim(Dl)
###
Pl.list <- rownames(Pl)
Dl.list <- rownames(Dl)
data.mat <- rbind(Pl, Dl)
# this is the baseline prediction, without sample subset optimization
pos.probs <- rep(1, length(Pl.list))
una.probs <- rep(1, length(Dl.list))
names(pos.probs) <- Pl.list
names(una.probs) <- Dl.list
##
source("/Users/pengyiyang/Dropbox/research/Resource/R code/commonFunctions.R")
# set working directory
setwd("/Users/pengyiyang/Dropbox/research/Projects/Project_TFTarget/source code/classification")
# source prediction functions and help functions
#source("AdaEnsemble.R")
###########################
# getting expression data #
# mRNA
load("/Users/pengyiyang/Dropbox/research/Collaborations/With Sean/Pengyi with Sean/mES to mEPi/Analysis/Transcriptome/mRNA.RData")
expression.genes.mean <- mRNA.ratio.mean[which(sapply(strsplit(rownames(mRNA.ratio.mean), "~"), function(x){x[2]}) != "NA"), ]
rownames(expression.genes.mean) <- sapply(strsplit(rownames(expression.genes.mean), "~"), function(x){x[2]})
mRNA.genes.mean <- expression.genes.mean
# protein
load("/Users/pengyiyang/Dropbox/research/Collaborations/With Sean/Pengyi with Sean/mES to mEPi/Analysis/Proteome/proteome.RData")
protGene <- sapply(strsplit(rownames(proteome.ratio.mean), "~"), function(x){x[2]})
tmp <- split(data.frame(proteome.ratio.mean), protGene)
protein.genes.mean <- t(sapply(tmp, colMeans))
# normalise and combine mRNA and protein data
mRNA.dat <- medianScaleNormalization(standardize(mRNA.genes.mean))
prot.dat <- medianScaleNormalization(standardize(protein.genes.mean))
o <- intersect(rownames(mRNA.dat), rownames(prot.dat))
exp.dat <- cbind(mRNA.dat[o,], prot.dat[o, ])
################################
### TF potential targets
# Nanog_, Sox2_, Esrrb_, cMyc_, Otx2_r1_, Nr5a2_, Klf4_r1_
P <- read.delim("proximal_distal/cMyc_proximal.txt", head=FALSE)
idx <- which(rownames(exp.dat) %in% as.character(P[,4]))
Pls <- exp.dat[idx,]
dim(Pls)
D <- read.delim("proximal_distal/cMyc_distal.txt")
idx <- which(rownames(exp.dat) %in% as.character(D[,1]))
D.tmp <- exp.dat[idx,]
Dls <- D.tmp[setdiff(rownames(D.tmp), rownames(Pls)),]
dim(Dls)
Pl <- rbind(Pls, Dls)
# creating true negatives
set.seed(123)
Dl <- exp.dat[sample(setdiff(rownames(exp.dat), union(rownames(Pls), rownames(Dls))), 1*(nrow(Pls)+nrow(Dls))),]
dim(Dl)
###
Pl.list <- rownames(Pl)
Dl.list <- rownames(Dl)
data.mat <- rbind(Pl, Dl)
# this is the baseline prediction, without sample subset optimization
pos.probs <- rep(1, length(Pl.list))
una.probs <- rep(1, length(Dl.list))
names(pos.probs) <- Pl.list
names(una.probs) <- Dl.list
##
AdaSampling
intermediateModel <- adaSample(Pl.list, Dl.list, data.mat, test.mat=data.mat, classifier="knn", C=50)
intermediateModel[1:10,]
ids <- names(which(intermediateModel[rownames(Pls),] > 0.5))
# proximal
tmp <- dat[ids,]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) +
theme(legend.position="none") + labs(title="Proximal (intermediate) genes", y = "Exp")
# distal
# visualizing prediction results
# dev.new(width=5, height=7)
#postscript("test.eps", width = 6, height = 6)
library(ggplot2)
order = c("0hr","1hr","6hr","12hr","24hr","36hr","48hr",
"72hr","LFQ.intensity.0m","LFQ.intensity.30m",
"LFQ.intensity.1h","LFQ.intensity.6h","LFQ.intensity.12h",
"LFQ.intensity.24h","LFQ.intensity.36h","LFQ.intensity.48h",
"LFQ.intensity.72h")
dat <- data.mat[,1:ncol(exp.dat)]
colfunc <- c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))
# proximal
tmp <- dat[rownames(Pls),]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) + theme(legend.position="none") + labs(title="Proximal genes", y = "Exp")
plot(apply(tmp, 2, median), ylim=c(-4, 4), pch=16, cex=0.4)
# distal
tmp <- dat[rownames(Dls),]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) +
theme(legend.position="none") + labs(title="Distal genes", y = "Exp")
plot(apply(tmp, 2, median), ylim=c(-4, 4), pch=16, cex=0.4)
### After (intermediate) training
ids <- names(which(intermediateModel[rownames(Pls),] > 0.5))
# proximal
tmp <- dat[ids,]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) +
theme(legend.position="none") + labs(title="Proximal (intermediate) genes", y = "Exp")
# distal
ids <- names(which(intermediateModel[rownames(Dls),] > 0.5))
tmp <- dat[ids,]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) +
theme(legend.position="none") + labs(title="Distal (intermediate) genes", y = "Exp")
ids
intermediateModel[rownames(Dls),]
### After (intermediate) training
ids <- names(which(intermediateModel[rownames(Pls),"P"] > 0.5))
# proximal
tmp <- dat[ids,]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) +
theme(legend.position="none") + labs(title="Proximal (intermediate) genes", y = "Exp")
# distal
ids <- names(which(intermediateModel[rownames(Dls),"P"] > 0.5))
tmp <- dat[ids,]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) +
theme(legend.position="none") + labs(title="Distal (intermediate) genes", y = "Exp")
# generate decoys
set.seed(1)
putative.targets <- union(rownames(Pl), rownames(Dl))
l <- length(setdiff(rownames(combined.dat), putative.targets))
Decoys <- exp.dat[sample(setdiff(rownames(exp.dat), putative.targets), size=min(length(putative.targets)), l),]
# classify decoys using argumented phase model
decoy.pred <- adaSample(Pl.list, Dl.list, data.mat, test.mat=Decoys,
classifier="knn", weights=weights, C=50)
fdr.bench <- sort(decoy.pred, decreasing=TRUE)
load("/Users/pengyiyang/Dropbox/research/Collaborations/With Sean/Pengyi with Sean/mES to mEPi/Analysis/Epigenome/ES_Epi_tss_epigenome.RData")
colnames(epigenome.genes) <- gsub("tss_", "", gsub(".gene", "", colnames(epigenome.genes)))
# select intermediate positive and negative examples
learntPositive <- intersect(rownames(epigenome.genes), names(which(rowMeans(intermediateModel[rownames(Pl),]) > 0.5)))
length(learntPositive)
learntNegative <- intersect(rownames(epigenome.genes), rownames(Dl))
length(learntNegative)
# built model and use epigenome as features; select most descriminative features
epigenome.filtered <- epigenome.genes[,-grep("Input", colnames(epigenome.genes))]
epigenome.scaled <- medianScaleNormalization(epigenome.filtered)
epigenome.normal <- epigenome.scaled[c(learntPositive, learntNegative), ]
dat <- data.frame(epigenome.normal, Class=rep(c("P", "N"), time=c(length(learntPositive), length(learntNegative))))
dat.filter <- dat
## ranking features
# ensure results are repeatable
set.seed(1)
# load the library
library(caret)
# load the dataset
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
fmodel <- train(Class~., data=dat, method="knn", preProcess="scale", trControl=control)
# estimate variable importance
importance <- varImp(fmodel, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
epi.importance <- rowMeans(importance$importance)
### step 3, prediction with epigenome data
o <- intersect(rownames(exp.dat), rownames(epigenome.scaled))
combined.dat <- cbind(exp.dat[o,], epigenome.scaled[o,])
#boxplot(combined.dat)
# Nanog, Sox2, Otx2 ...
idx <- which(rownames(combined.dat) %in% as.character(P[,4]))
Pls <- combined.dat[idx,]
dim(Pls)
idx <- which(rownames(combined.dat) %in% as.character(D[,1]))
D.tmp <- combined.dat[idx,]
Dls <- D.tmp[setdiff(rownames(D.tmp), rownames(Pls)),]
dim(Dls)
Pl <- rbind(Pls, Dls)
set.seed(123)
Dl <- combined.dat[sample(setdiff(rownames(combined.dat), union(rownames(Pls), rownames(Dls))),
1*(nrow(Pls)+nrow(Dls))),]
dim(Dl)
##
Pl.list <- rownames(Pl)
Dl.list <- rownames(Dl)
data.mat <- rbind(Pl, Dl)
# this is the baseline prediction, without sample subset optimization
pos.probs <- rep(1, length(Pl.list))
una.probs <- rep(1, length(Dl.list))
names(pos.probs) <- Pl.list
names(una.probs) <- Dl.list
##
tt <- ncol(mRNA.dat) + ncol(prot.dat)
mRNA.weights <- rep(tt / ncol(mRNA.dat), ncol(mRNA.dat))
prot.weights <- rep(tt / ncol(prot.dat), ncol(prot.dat))
#id <- which(epi.importance > 0.5)
#epi.weights <- rep(0, length(epi.importance))
epi.weights <- epi.importance^10 * (sum(mRNA.weights) / sum(epi.importance^10))
#epi.weights[order(epi.importance)]
weights <- c(mRNA.weights, prot.weights, epi.weights)
check <- adaSample(Pl.list, Dl.list, train.mat=data.mat, test.mat=data.mat, classifier="wKNN",
weights=weights, C=50)
weights
singleIter(Pl.list, Dl.list, dat=data.mat, test=data.mat, classifier="wKNN", seed=1, sampleFactor=0.6, weights=weights)
adaSample(Pl.list, Dl.list, train.mat=data.mat, test.mat=data.mat, classifier="wKNN",
weights=weights, C=50)
adaSample
singleIter(Pl.list, Dl.list, dat=data.mat, test=data.mat, classifier="wKNN", seed=1, sampleFactor=0.6, weights=weights)
check <- adaSample(Pl.list, Dl.list, train.mat=data.mat, test.mat=data.mat, classifier="wKNN", seed=1, sampleFactor=0.6, weights=weights, C=50)
check <- adaSample(Pl.list, Dl.list, train.mat=data.mat, test.mat=data.mat, classifier="wKNN", sampleFactor=0.6, weights=weights, C=50)
library(AdaSampling)
check <- adaSample(Pl.list, Dl.list, train.mat=data.mat, test.mat=data.mat, classifier="wKNN", sampleFactor=0.6, weights=weights, C=50)
weights
library(AdaSampling)
check <- adaSample(Pl.list, Dl.list, train.mat=data.mat, test.mat=data.mat, classifier="wKNN", sampleFactor=0.6, weights=weights, C=50)
check <- adaSample(Pl.list, Dl.list, train.mat=data.mat, test.mat=data.mat, classifier="wKNN", sampleFactor=0.6, weights=weights, C=50)
library(AdaSampling)
check[1:10,]
finalModel <- check
# visualizing prediction results
dat <- combined.dat
#par(mfrow=c(2,2))
#colfunc <- c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))
#boxplot(dat[rownames(Pls),], col=colfunc, main="Proximal genes", ylim=c(-2.5,3.2), notch=T)
#boxplot(dat[rownames(Dls),], col=colfunc, main="Distal genes", ylim=c(-2.5,3.2), notch=T)
# After argumented learning
# proximal
ids <- names(which(finalModel[rownames(Pls),] > 0.9))
tmp <- dat[ids,1:ncol(exp.dat)]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) + theme(legend.position="none") + labs(title="Proximal genes", y = "Exp")
dat <- combined.dat
#par(mfrow=c(2,2))
#colfunc <- c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))
#boxplot(dat[rownames(Pls),], col=colfunc, main="Proximal genes", ylim=c(-2.5,3.2), notch=T)
#boxplot(dat[rownames(Dls),], col=colfunc, main="Distal genes", ylim=c(-2.5,3.2), notch=T)
# After argumented learning
# proximal
ids <- names(which(finalModel[rownames(Pls),"P"] > 0.9))
tmp <- dat[ids,1:ncol(exp.dat)]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) + theme(legend.position="none") + labs(title="Proximal genes", y = "Exp")
# distal
ids <- names(which(finalModel[rownames(Dls),"P"] > 0.9))
tmp <- dat[ids,1:ncol(exp.dat)]
df <- data.frame(vals = as.numeric(tmp), grps = factor(rep(colnames(tmp), each=nrow(tmp)), levels=order))
ggplot(df, aes(x=grps, y=vals, fill=grps)) + geom_violin(trim=FALSE) +
scale_fill_manual(values=c(colorRampPalette(c("red2", "green4"))(8), colorRampPalette(c("orange", "blue3"))(9))) + theme(legend.position="none") + labs(title="Distal genes", y = "Exp")
library(AdaSampling)
install.packages("knitr")
install.packages("rmarkdown")
library(AdaSampling)
install.packages("pandoc")
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
install.packages("roxygen2")
install.packages("pandoc")
sd
