TP <- c(TP, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "1"]))
TN <- c(TN, sum((data.cls.truth[fold[[i]]] == preds)[data.cls.truth[fold[[i]]] == "0"]))
FP <- c(FP, sum((data.cls.truth[fold[[i]]] != preds)[preds == "1"]))
FN <- c(FN, sum((data.cls.truth[fold[[i]]] != preds)[preds == "0"]))
}
TP
model <- svm(data.mat[-fold[[i]],], data.cls.truth[-fold[[i]]]) #training a support vector machine
model
preds <- predict(model, data.mat[fold[[i]],], decision.values=TRUE, probability=F) #showing the test data to the model to generate preds
preds
View(data.mat)
View(features.brca)
is.factor(features.brca$chr)
is.factor(features.brca[,7])
is.factor(data.mat[,7])
model <- svm((features.brca[-fold[[i]],], labels.brca[-fold[[i]]]))
model <- e1071::svm(features.brca[-fold[[i]],], labels.brca[-fold[[i]]])
model
preds <- predict(model, features.brca[fold[[i]],], decision.values=TRUE, probability=F)
preeds
preds
is.factor(data.cls.truth)
is.factor(labels.brca)
model <- e1071::svm(data.mat[-fold[[i]],], as.factor(data.cls.truth[-fold[[i]]])) #training a support vector machine
preds <- predict(model, data.mat[fold[[i]],], decision.values=TRUE, probability=F) #showing the test data to the model to generate preds
preds
model <- e1071::svm(features.brca[-fold[[i]],], as.factor(labels.brca[-fold[[i]]])) #training a support vector machine
model
preds <- predict(model, features.brca[fold[[i]],], decision.values=TRUE, probability=F) #showing the test data to the model to generate preds
preds
devtools::load_all(".")
adaBenchmark(data.mat = features.brca, data.cls = labels.brca.noisy, data.cls.truth = labels.brca)
adaBenchmark(data.mat = features.brca, data.cls = labels.brca.noisy, data.cls.truth = labels.brca)
devtools::load_all(".")
adaBenchmark(data.mat = features.brca, data.cls = labels.brca.noisy, data.cls.truth = labels.brca)
devtools::load_all(".")
adaBenchmark(data.mat = features.brca, data.cls = labels.brca.noisy, data.cls.truth = labels.brca)
adaBenchmark(data.mat = data.mat, data.cls = data.cls, data.cls.truth = data.cls.truth)
class(data.cls)
is.vector(data.cls)
data.cls <- as.vector(data.cls)
adaBenchmark(data.mat = data.mat, data.cls = data.cls, data.cls.truth = data.cls.truth)
labels.brca.noisy
data.cls
is.vector(data.cls)
as.factor(data.cls)
is.vector(as.factor(data.cls))
is.vector(labels.brca.noisy)
is.factor(labels.brca.noisy)
typeof(labels.brca.noisy)
as.double()
?as.double
head(features.brca)
head(data.mat)
data.cls
data.cls <- as.vector(data.cls)
data.cls<- as.numeric(data.cls)
data.cols
data.cls
adaBenchmark(data.mat = data.mat, data.cls, data.cls.truth)
adaBenchmark(features.brca, labels.brca.noisy, labels.brca)
breast.raw <- read.delim("/Users/Dinuka/Documents/1 UOS/2017 Semester 2/TSP 2017 S2/Clean code/breast-w.txt",
sep = ",", head=FALSE)
breast <- rbind(breast.raw[which(breast.raw[,10]!="benign"), ], breast.raw[which(breast.raw[,10]=="benign"), ])
breast.filtered <- breast[which(rowSums(breast == "?") == 0), ] #this is called brca in the package
breast.dat <- apply(breast.filtered[,-10], 2, as.numeric) #training data features
rownames(breast.dat) <- paste("i", c(1:nrow(breast.dat)), sep="")
breast.cls <- rep(0, nrow(breast.dat)) #initiating all classes as 0
breast.cls[breast.filtered[,10] != 'benign'] <- 1 #then assigning all benign ones to 1
data.cls.truth <- as.factor(breast.cls)
data.mat <- breast.dat
# introduce class label noise
set.seed(1)
pos <- which(data.cls.truth == 1)
neg <- which(data.cls.truth == 0)
data.cls <- data.cls.truth
data.cls[sample(pos, floor(length(pos) * 0.4))] <- 0
data.cls[sample(neg, floor(length(neg) * 0.2))] <- 1
devtools::load_all(".")
devtools::test()
adaBenchmark(features.brca, labels.brca.noisy, labels.brca)
adaBenchmark(data.mat, data.cls, data.cls.truth)
data.cls
is.vector(data.cls)
class(data.cls)
devtools::load_all(".")
devtools::test()
sum(data.cls==labels.brca.noisy)
(data.cls==labels.brca.noisy)
table(labels.brca.noisy)
table(data.cls)
data.cls
length(data.cls)
length(labels.brca.noisy)
data.cls == labels.brca.noisy
set.seed(1)
pos <- which(data.cls.truth == 1)
neg <- which(data.cls.truth == 0)
data.cls <- data.cls.truth
data.cls[sample(pos, floor(length(pos) * 0.4))] <- 0
data.cls[sample(neg, floor(length(neg) * 0.2))] <- 1
table(data.cls)
class(brca)
class(data.mat)
class(features.brca)
identical(features.brca, data.ma)
identical(features.brca, data.mat)
dim(features.brca)
dim(data.mat)
identical(features.brca, data.mat)
colnames(features.brca) <- NULL
rownames(features.brca) <- NULL
colnames(data.mat) <- NULL
rownames(data.mat) <- NULL
identical(features.brca, data.mat)
identical(data.cls.truth, labels.brca)
data.cls.truth
labels.brca
class(labels.brca)
class(data.cls.truth)
data.cls.truth <- as.numeric(data.cls.truth)
identical(data.cls.truth, labels.brca)
table(data.cls.truth)
table(labels.brca)
names(labels.brca)
names(data.cls.truth)
data.cls.truth==labels.brca
is.numeric(labels.brca)
is.numeric(data.cls.truth)
identical(labels.brca[1], data.cls.truth[1])
data.frame(data.cls.truth, labels.brca)
View(data.frame(data.cls.truth, labels.brca))
data.cls.trut
data.cls.truth
# read in dataset
breast.raw <- read.delim("/Users/Dinuka/Documents/1 UOS/2017 Semester 2/TSP 2017 S2/Clean code/breast-w.txt",
sep = ",", head=FALSE)
breast <- rbind(breast.raw[which(breast.raw[,10]!="benign"), ], breast.raw[which(breast.raw[,10]=="benign"), ])
breast.filtered <- breast[which(rowSums(breast == "?") == 0), ] #this is called brca in the package
breast.dat <- apply(breast.filtered[,-10], 2, as.numeric) #training data features
rownames(breast.dat) <- paste("i", c(1:nrow(breast.dat)), sep="")
breast.cls <- rep(0, nrow(breast.dat)) #initiating all classes as 0
breast.cls[breast.filtered[,10] != 'benign'] <- 1 #then assigning all benign ones to 1
data.cls.truth <- as.factor(breast.cls)
data.mat <- breast.dat
# introduce class label noise
set.seed(1)
pos <- which(data.cls.truth == 1)
neg <- which(data.cls.truth == 0)
data.cls <- data.cls.truth
data.cls[sample(pos, floor(length(pos) * 0.4))] <- 0
data.cls[sample(neg, floor(length(neg) * 0.2))] <- 1
data.cls.truth
as.numeric(data.cls.truth)
breast.raw <- read.delim("/Users/Dinuka/Documents/1 UOS/2017 Semester 2/TSP 2017 S2/Clean code/breast-w.txt",
sep = ",", head=FALSE)
breast <- rbind(breast.raw[which(breast.raw[,10]!="benign"), ], breast.raw[which(breast.raw[,10]=="benign"), ])
breast.filtered <- breast[which(rowSums(breast == "?") == 0), ] #this is called brca in the package
breast.dat <- apply(breast.filtered[,-10], 2, as.numeric) #training data features
rownames(breast.dat) <- paste("i", c(1:nrow(breast.dat)), sep="")
breast.cls <- rep(0, nrow(breast.dat)) #initiating all classes as 0
breast.cls[breast.filtered[,10] != 'benign'] <- 1 #then assigning all benign ones to 1
data.cls.truth <- (breast.cls) #removed the 'as.factor()' bit
data.mat <- breast.dat
# introduce class label noise
set.seed(1)
pos <- which(data.cls.truth == 1)
neg <- which(data.cls.truth == 0)
data.cls <- data.cls.truth
data.cls[sample(pos, floor(length(pos) * 0.4))] <- 0
data.cls[sample(neg, floor(length(neg) * 0.2))] <- 1
data.cls.truth
identical(data.cls.truth, labels.brca)
identical(data.mat, labels.brca)
#for all intents and purposes they are equal
#
#
data.cls==labels.brca.noisy
set.seed(1)
pos <- which(labels.brca == 1)
neg <- which(labels.brca == 0)
labels.brca.noisy <- labels.brca
labels.brca.noisy[sample(pos, floor(length(pos) * 0.4))] <- 0
labels.brca.noisy[sample(neg, floor(length(neg) * 0.2))] <- 1
labels.brca.noisy==data.cls.truth
set.seed(1)
pos <- which(labels.brca == 1)
neg <- which(labels.brca == 0)
pos
neg
which(data.cls.truth==1)
data.cls <- data.cls.truth
data.cls[sample(pos, floor(length(pos) * 0.4))] <- 0
data.cls[sample(neg, floor(length(neg) * 0.2))] <- 1
data.cls
labels.brca.noisy
labels.brca.noisy==data.cls
devtools::load_all(".")
devtools::test()
data.cls
data.cls==labels.brca.noisy
data.cls.truth==labels.brca
data.mat==features.brca
devtools::test()
adaBenchmark(data.mat, data.cls, data.cls.truth)
adaBenchmark(features.brca, labels.brca.noisy, labels.brca)
devtools::load_all(".")
q()
help.start()
x <- function (x) {x + 2 - x/2}
x
typeof(x)
typeof(x) <- S4
typeof(x) <- "S4"
names(x)
names(x) <- c(`1`, `2`)
names(x) <- c("1", "2")
devtools::load_all(".")
devtools::test()
breast.raw <- read.delim("/Users/pengyiyang/Dropbox/research/Projects/Project_AdaSampling/data/breast-w.txt", sep = ",", head=FALSE)
data.cls.truth
breast.raw <- read.delim("https://www.dropbox.com/s/8wdwmu704kpmyc6/breast-w.txt?dl=0", sep = ",", head=FALSE)
breast <- rbind(breast.raw[which(breast.raw[,10]!="benign"), ], breast.raw[which(breast.raw[,10]=="benign"), ])
head(breast.raw)
breast.raw <- read.delim("/Users/Dinuka/Dropbox/Dinuka/Project 2017/AdaSampling/Clean code/breast-w.txt", sep = ",", head=FALSE)
breast <- rbind(breast.raw[which(breast.raw[,10]!="benign"), ], breast.raw[which(breast.raw[,10]=="benign"), ])
breast.filtered <- breast[which(rowSums(breast == "?") == 0), ]
breast.dat <- apply(breast.filtered[,-10], 2, as.numeric)
rownames(breast.dat) <- paste("i", c(1:nrow(breast.dat)), sep="")
breast.cls <- rep(0, nrow(breast.dat))
breast.cls[breast.filtered[,10] != 'benign'] <- 1
data.mat <- breast.dat
data.cls.truth <- as.factor(breast.cls)
# set up
set.seed(1)
pos <- which(data.cls.truth == 1)
neg <- which(data.cls.truth == 0)
data.cls <- data.cls.truth
data.cls[sample(pos, floor(length(pos) * 0.35))] <- 0
data.cls[sample(neg, floor(length(neg) * 0.2))] <- 1
b <- mclapply(1:10, noisyLabelKnn, data.mat=data.mat, data.cls=data.cls, data.cls.truth=data.cls.truth, C=50)
# source required functions
source("functions.r")
# source required functions
source("/Users/Dinuka/Dropbox/Dinuka/Project 2017/AdaSampling/Clean code/functions.r")
# read in dataset
breast.raw <- read.delim("/Users/Dinuka/Dropbox/Dinuka/Project 2017/AdaSampling/Clean code/breast-w.txt",
sep = ",", head=FALSE)
breast <- rbind(breast.raw[which(breast.raw[,10]!="benign"), ], breast.raw[which(breast.raw[,10]=="benign"), ])
breast.filtered <- breast[which(rowSums(breast == "?") == 0), ]
breast.dat <- apply(breast.filtered[,-10], 2, as.numeric)
rownames(breast.dat) <- paste("i", c(1:nrow(breast.dat)), sep="")
breast.cls <- rep(0, nrow(breast.dat))
breast.cls[breast.filtered[,10] != 'benign'] <- 1
data.mat <- breast.dat
data.cls.truth <- as.factor(breast.cls)
# introduce class label noise
set.seed(1)
pos <- which(data.cls.truth == 1)
neg <- which(data.cls.truth == 0)
data.cls <- data.cls.truth
data.cls[sample(pos, floor(length(pos) * 0.4))] <- 0
data.cls[sample(neg, floor(length(neg) * 0.2))] <- 1
# run a minimal AdaSampling procedure
noisyLabelSvm(data.mat=data.mat, data.cls=data.cls, data.cls.truth=data.cls.truth, cvSeed=1, C=50)
data.cls.truth
data.cls
data.cls==data.mat
data.cls==labels.brca.noisy
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::load_all(".") #Change this to "library(AdaSampling::adaSample())" when package is built.
data(brca)
train.cls <- labels.brca[train.ind]
features.brca <- apply(X = brca[,-10], MARGIN = 2, FUN = as.numeric)
labels.brca <- sapply(X = brca$cla, FUN = function(x) {ifelse(x == "malignant", 1, 0)})
head(features.brca)
labels.brca
labels.brca==data.cls.truth
identical(data.cls.truth, labels.brca)
class(labels.brca)
class(data.cls.truth)
identical(data.cls.truth, as.factor(labels.brca))
#Correct values given by Pengyi's Clean Code file
Se    Sp    F1
Original    0.971 0.964 0.953
Baseline    0.812 0.980 0.874
AdaSingle   0.899 0.973 0.921
AdaEnsemble 0.900 0.978 0.926
adaBenchmark(data.mat, data.cls, data.cls.truth)
adaBenchmark(data.mat, as.numeric(data.cls), data.cls.truth)
adaBenchmark(data.mat, as.numeric(data.cls), as.numeric(data.cls.truth))
data.cls.truth
typeof(data.cls.trut)
typeof(data.cls.truth)
is.numeric(data.cls.truth)
is.character(data.cls.truth)
is.factor(data.cls.truth)
is.numeric(as.numeric(data.cls.truth))
adaBenchmark(data.mat, as.numeric(data.cls), as.numeric(data.cls.truth))
length(setdiff(as.numeric(data.cls.truth), c(0, 1)))
(setdiff(as.numeric(data.cls.truth), c(0, 1)))
as.numeric(data.cls.truth)
identical(as.factor(labels.brca), data.cls.truth)
class(features.brca)
class(data.mat)
dim(data.mat)
dim(data.mat)[1]
identical(features.brca[683, 9], data.mat[683, 9])
#features.brca and data.mat should be identical except for row/col names
features.brca.nonames <- features.brca
rownames(features.brca.nonames) <- NULL
colnames(features.brca.nonames) <- NULL
data.mat.nonames <- data.mat
rownames(data.mat.nonames) <- NULL
colnames(data.mat.nonames) <- NULL
identical(features.brca.nonames[683, 9], data.mat.nonames[683, 9])
class(labels.brca.noisy)
set.seed(1)
pos <- which(labels.brca == 1)
neg <- which(labels.brca == 0)
labels.brca.noisy <- labels.brca
labels.brca.noisy[sample(pos, floor(length(pos) * 0.4))] <- 0
labels.brca.noisy[sample(neg, floor(length(neg) * 0.2))] <- 1
#labels.brca.noisy and data.cls should be the same
identical(labels.brca.noisy, data.cls)
class(labels.brca.noisy)
class(data.cls)
#labels.brca.noisy and data.cls should be the same
identical(as.factor(labels.brca.noisy), data.cls)
#So, these should both give the same result?
adaBenchmark(data.mat, data.cls, data.cls.truth)
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
devtools::load_all(".")
adaBenchmark(data.mat, data.cls, data.cls.truth)
adaBenchmark(features.brca.nonames, as.factor(labels.brca.noisy), as.factor(labels.brca))
benchmark.mat.pengyi <- adaBenchmark(data.mat, data.cls, data.cls.truth)
benchmark.mat.dinuka <- adaBenchmark(features.brca.nonames, as.factor(labels.brca.noisy), as.factor(labels.brca))
identical(benchmark.mat.pengyi, benchmark.mat.dinuka)
#Let's see if we can reproduce this error by changing whether the inputs are factors
adaBenchmark(features.brca.nonames, as.factor(labels.brca.noisy), labels.brca) #3rd arg not factor
adaBenchmark(features.brca.nonames, labels.brca.noisy, as.factor(labels.brca)) #2nd arg not factor --- gives
adaBenchmark(features.brca.nonames, labels.brca.noisy, labels.brca)
Pl.list <- paste("row", (which(labels.brca==1), sep = ""))
Pl.list <- paste("row", (which(labels.brca==1)), sep = ""))
Pl.list <- paste("row", (which(labels.brca==1)), sep = "")
Pl.list
Dl.list <- paste("row", (which(labels.brca==0)), sep = "")
Pl.list <- paste("row", which(as.factor(labels.brca)==1), sep = "")
Pl.list
Dl.list <- paste("row", which(as.factor(labels.brca)==0), sep = "")
Dl.list
Pl.list <- paste("row", (which(labels.brca==1)), sep = "")
Dl.list <- paste("row", (which(labels.brca==0)), sep = "")
Pl.listf <- paste("row", which(as.factor(labels.brca)==1), sep = "")
Dl.listf <- paste("row", which(as.factor(labels.brca)==0), sep = "")
sum(length(Pl.list) + length(Dl.list))
sum(length(Pl.listf) + length(Dl.list))
?aes_string
identical(Pl.list, Pl.listf)
identical(Dl.list, Dl.listf)
class(Pl.list, Pl.listf)
class(Pl.list)
class(Pl.list)
class(Pl.listf)
Pl.listf <- paste("row", which(as.factor(labels.brca)==1), sep = "")
fold
labels.brca.f[1:20]
#So the adaSample function sees them exactly the same, but what about the wrapper code in adaBenchmark?
#this wrapper code is used to compare labels. Minimal reproducible example here:
labels.brca.f <- as.factor(labels.brca)
labels.brca.f[1:20]
preds
rep(c(1,0), 10)
(c(1,0), 10)
preds <- rep(c(1,0), 10)
length(preds)
sum((labels.brca.f[1:20] == preds)[labels.brca.f[1:20] == "1"]) #calculation for True positives.
sum((labels.brca[1:20] == preds)[labels.brca[1:20] == "1"])
is.factor(labels.brca)
is.factor(labels.brca.f)
devtools::load_all(".")
adaBenchmark(features.brca, labels.brca.noisy, labels.brca)
setdiff(cls, c(0, 1)))
setdiff(cls, c(0, 1))
setdiff(data.cls, c(0, 1))
setdiff(as.factor(data.cls), c(0,1))
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
devtools::test()
breast.raw <- read.delim("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/
breast-cancer-wisconsin.data",
sep = ",", head=FALSE)
read.delim("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data",
sep = ",", head=FALSE)
breast.raw <- read.delim("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data",
sep = ",", head=FALSE)
breast <- rbind(breast.raw[which(breast.raw[,10]!="benign"), ], breast.raw[which(breast.raw[,10]=="benign"), ])
breast.filtered <- breast[which(rowSums(breast == "?") == 0), ] #this is called brca in the package
breast.dat <- apply(breast.filtered[,-10], 2, as.numeric) #training data features
rownames(breast.dat) <- paste("i", c(1:nrow(breast.dat)), sep="")
breast.cls <- rep(0, nrow(breast.dat)) #initiating all classes as 0
breast.cls[breast.filtered[,10] != 'benign'] <- 1 #then assigning all benign ones to 1
data.cls.truth <- as.factor(breast.cls)
data.mat <- breast.dat
head(data.mat)
getwd()
breast.raw <- read.delim("tests/testthat/breast-w.txt",
sep = ",", head=FALSE)
breast.raw
devtools::test()
devtools::load_all(".")
devtools::test()
?system.file
system.file("testthat", "breast-w", "AdaSampling")
system.file("testthat", "breast-w.txt", "AdaSampling")
system.file("testthat", "breast-w.txt", "AdaSampling")
system.file("testthat", "breast-w.txt", "adasample")
system.file("testthat", "breast-w.txt", "adasample")
devtools::system.file("testthat", "breast-w.txt", "AdaSampling")
system.file("testthat", "breast-w.txt", "AdaSampling")
system.file("tests", "breast-w.txt", "AdaSampling")
system.file("tests", "breast-w.txt", "adsample")
system.file("tests", "breast-w.txt", "adasample")
system.file("data", "brca.csv", "AdaSampling")
system.file("data-raw", "brca.csv", "AdaSampling")
system.file("data-raw", "brca.csv", "adasample")
?system.file
devtools::test()
system.file("raw-data", "brca.csv", "AdaSampling")
system.file("data-raw", "brca.csv", "AdaSampling")
system.file("data-raw", "brca.csv", "adasample")
file()
system.file
system.file("data-raw", "brca.csv", "adasample", mustWork = TRUE)
system.file("data-raw", "brca.csv", "AdaSampling", mustWork = TRUE)
system.file("data-raw", "brca.csv", package="AdaSampling", mustWork = TRUE)
system.file("testthat", "brca.txt", package="AdaSampling", mustWork = TRUE)
system.file("testthat", "breast-w.txt", package="AdaSampling", mustWork = TRUE)
system.file("tests", testthat", "breast-w.txt", package="AdaSampling", mustWork = TRUE)
breast-w.txt
system.file("testthat", "breast-w.txt", package = "AdaSampling")
system.file("tests", "breast-w.txt", package = "AdaSampling")
system.file("tests", "breast-w.txt", package = "AdaSampling")
devtools::load_all(".")
devtools::load_all(".")
devtools::test()
?adaSample
as.data.frame(data.mat)
{breast.raw <- read.delim(system.file("tests", "breast-w.txt", package = "AdaSampling"),
sep = ",", head=FALSE)
breast <- rbind(breast.raw[which(breast.raw[,10]!="benign"), ], breast.raw[which(breast.raw[,10]=="benign"), ])
breast.filtered <- breast[which(rowSums(breast == "?") == 0), ] #this is called brca in the package
breast.dat <- apply(breast.filtered[,-10], 2, as.numeric) #training data features
rownames(breast.dat) <- paste("i", c(1:nrow(breast.dat)), sep="")
breast.cls <- rep(0, nrow(breast.dat)) #initiating all classes as 0
breast.cls[breast.filtered[,10] != 'benign'] <- 1 #then assigning all benign ones to 1
data.cls.truth <- as.factor(breast.cls)
data.mat <- breast.dat
}
data.mat
devtools::load_all(".")
devtools::test()
devtools::test()
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
devtools::tests()
devtools::test()
devtools::load_all(".")
devtools::document()
?adaBenchmark
devtools::load_all(".")
devtools::document()
?adaBenchmark
devtools::check()
devtools::test()
devtools::load_all(".")
devtools::check()
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
devtools:test()
devtools::load_all(".")
devtools::test()
devtools::check()
sessionInfo()
search()
devtools::document()
devtools::load_all(".")
devtools::document()
sd
predict
stats
package('stats')
library(glm)
library(stats)
library(binomial)
librarypredict
?predict
?predict.svm
devtools::load_all(".")
devtools::check()
devtools::test()
file.exists("~/.ssh/id_rsa.pub")
